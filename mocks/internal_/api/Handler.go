// Code generated by mockery. DO NOT EDIT.

package api

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// Handler is an autogenerated mock type for the Handler type
type Handler struct {
	mock.Mock
}

type Handler_Expecter struct {
	mock *mock.Mock
}

func (_m *Handler) EXPECT() *Handler_Expecter {
	return &Handler_Expecter{mock: &_m.Mock}
}

// CreateAccount provides a mock function with given fields: c
func (_m *Handler) CreateAccount(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Handler_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type Handler_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - c echo.Context
func (_e *Handler_Expecter) CreateAccount(c interface{}) *Handler_CreateAccount_Call {
	return &Handler_CreateAccount_Call{Call: _e.mock.On("CreateAccount", c)}
}

func (_c *Handler_CreateAccount_Call) Run(run func(c echo.Context)) *Handler_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *Handler_CreateAccount_Call) Return(_a0 error) *Handler_CreateAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Handler_CreateAccount_Call) RunAndReturn(run func(echo.Context) error) *Handler_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccountTransaction provides a mock function with given fields: c
func (_m *Handler) CreateAccountTransaction(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccountTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Handler_CreateAccountTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccountTransaction'
type Handler_CreateAccountTransaction_Call struct {
	*mock.Call
}

// CreateAccountTransaction is a helper method to define mock.On call
//   - c echo.Context
func (_e *Handler_Expecter) CreateAccountTransaction(c interface{}) *Handler_CreateAccountTransaction_Call {
	return &Handler_CreateAccountTransaction_Call{Call: _e.mock.On("CreateAccountTransaction", c)}
}

func (_c *Handler_CreateAccountTransaction_Call) Run(run func(c echo.Context)) *Handler_CreateAccountTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *Handler_CreateAccountTransaction_Call) Return(_a0 error) *Handler_CreateAccountTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Handler_CreateAccountTransaction_Call) RunAndReturn(run func(echo.Context) error) *Handler_CreateAccountTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountLimits provides a mock function with given fields: c
func (_m *Handler) GetAccountLimits(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountLimits")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Handler_GetAccountLimits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountLimits'
type Handler_GetAccountLimits_Call struct {
	*mock.Call
}

// GetAccountLimits is a helper method to define mock.On call
//   - c echo.Context
func (_e *Handler_Expecter) GetAccountLimits(c interface{}) *Handler_GetAccountLimits_Call {
	return &Handler_GetAccountLimits_Call{Call: _e.mock.On("GetAccountLimits", c)}
}

func (_c *Handler_GetAccountLimits_Call) Run(run func(c echo.Context)) *Handler_GetAccountLimits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *Handler_GetAccountLimits_Call) Return(_a0 error) *Handler_GetAccountLimits_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Handler_GetAccountLimits_Call) RunAndReturn(run func(echo.Context) error) *Handler_GetAccountLimits_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountProfile provides a mock function with given fields: c
func (_m *Handler) GetAccountProfile(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Handler_GetAccountProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountProfile'
type Handler_GetAccountProfile_Call struct {
	*mock.Call
}

// GetAccountProfile is a helper method to define mock.On call
//   - c echo.Context
func (_e *Handler_Expecter) GetAccountProfile(c interface{}) *Handler_GetAccountProfile_Call {
	return &Handler_GetAccountProfile_Call{Call: _e.mock.On("GetAccountProfile", c)}
}

func (_c *Handler_GetAccountProfile_Call) Run(run func(c echo.Context)) *Handler_GetAccountProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *Handler_GetAccountProfile_Call) Return(_a0 error) *Handler_GetAccountProfile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Handler_GetAccountProfile_Call) RunAndReturn(run func(echo.Context) error) *Handler_GetAccountProfile_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountTransactions provides a mock function with given fields: c
func (_m *Handler) GetAccountTransactions(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountTransactions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Handler_GetAccountTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountTransactions'
type Handler_GetAccountTransactions_Call struct {
	*mock.Call
}

// GetAccountTransactions is a helper method to define mock.On call
//   - c echo.Context
func (_e *Handler_Expecter) GetAccountTransactions(c interface{}) *Handler_GetAccountTransactions_Call {
	return &Handler_GetAccountTransactions_Call{Call: _e.mock.On("GetAccountTransactions", c)}
}

func (_c *Handler_GetAccountTransactions_Call) Run(run func(c echo.Context)) *Handler_GetAccountTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *Handler_GetAccountTransactions_Call) Return(_a0 error) *Handler_GetAccountTransactions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Handler_GetAccountTransactions_Call) RunAndReturn(run func(echo.Context) error) *Handler_GetAccountTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateCreateTransactionRequest provides a mock function with given fields: next
func (_m *Handler) ValidateCreateTransactionRequest(next echo.HandlerFunc) echo.HandlerFunc {
	ret := _m.Called(next)

	if len(ret) == 0 {
		panic("no return value specified for ValidateCreateTransactionRequest")
	}

	var r0 echo.HandlerFunc
	if rf, ok := ret.Get(0).(func(echo.HandlerFunc) echo.HandlerFunc); ok {
		r0 = rf(next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.HandlerFunc)
		}
	}

	return r0
}

// Handler_ValidateCreateTransactionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateCreateTransactionRequest'
type Handler_ValidateCreateTransactionRequest_Call struct {
	*mock.Call
}

// ValidateCreateTransactionRequest is a helper method to define mock.On call
//   - next echo.HandlerFunc
func (_e *Handler_Expecter) ValidateCreateTransactionRequest(next interface{}) *Handler_ValidateCreateTransactionRequest_Call {
	return &Handler_ValidateCreateTransactionRequest_Call{Call: _e.mock.On("ValidateCreateTransactionRequest", next)}
}

func (_c *Handler_ValidateCreateTransactionRequest_Call) Run(run func(next echo.HandlerFunc)) *Handler_ValidateCreateTransactionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.HandlerFunc))
	})
	return _c
}

func (_c *Handler_ValidateCreateTransactionRequest_Call) Return(_a0 echo.HandlerFunc) *Handler_ValidateCreateTransactionRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Handler_ValidateCreateTransactionRequest_Call) RunAndReturn(run func(echo.HandlerFunc) echo.HandlerFunc) *Handler_ValidateCreateTransactionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewHandler creates a new instance of Handler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Handler {
	mock := &Handler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
