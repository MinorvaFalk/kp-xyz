// Code generated by mockery. DO NOT EDIT.

package api

import (
	context "context"
	model "kp/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

type Usecase_Expecter struct {
	mock *mock.Mock
}

func (_m *Usecase) EXPECT() *Usecase_Expecter {
	return &Usecase_Expecter{mock: &_m.Mock}
}

// CreateAccount provides a mock function with given fields: ctx, req
func (_m *Usecase) CreateAccount(ctx context.Context, req *model.RequestCreateAccount) (*model.AccountCreated, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 *model.AccountCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.RequestCreateAccount) (*model.AccountCreated, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.RequestCreateAccount) *model.AccountCreated); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccountCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.RequestCreateAccount) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type Usecase_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - req *model.RequestCreateAccount
func (_e *Usecase_Expecter) CreateAccount(ctx interface{}, req interface{}) *Usecase_CreateAccount_Call {
	return &Usecase_CreateAccount_Call{Call: _e.mock.On("CreateAccount", ctx, req)}
}

func (_c *Usecase_CreateAccount_Call) Run(run func(ctx context.Context, req *model.RequestCreateAccount)) *Usecase_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.RequestCreateAccount))
	})
	return _c
}

func (_c *Usecase_CreateAccount_Call) Return(_a0 *model.AccountCreated, _a1 error) *Usecase_CreateAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_CreateAccount_Call) RunAndReturn(run func(context.Context, *model.RequestCreateAccount) (*model.AccountCreated, error)) *Usecase_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTransaction provides a mock function with given fields: ctx, req
func (_m *Usecase) CreateTransaction(ctx context.Context, req *model.RequestCreateTransaction) (*model.AccountTransaction, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 *model.AccountTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.RequestCreateTransaction) (*model.AccountTransaction, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.RequestCreateTransaction) *model.AccountTransaction); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccountTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.RequestCreateTransaction) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_CreateTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransaction'
type Usecase_CreateTransaction_Call struct {
	*mock.Call
}

// CreateTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - req *model.RequestCreateTransaction
func (_e *Usecase_Expecter) CreateTransaction(ctx interface{}, req interface{}) *Usecase_CreateTransaction_Call {
	return &Usecase_CreateTransaction_Call{Call: _e.mock.On("CreateTransaction", ctx, req)}
}

func (_c *Usecase_CreateTransaction_Call) Run(run func(ctx context.Context, req *model.RequestCreateTransaction)) *Usecase_CreateTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.RequestCreateTransaction))
	})
	return _c
}

func (_c *Usecase_CreateTransaction_Call) Return(_a0 *model.AccountTransaction, _a1 error) *Usecase_CreateTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_CreateTransaction_Call) RunAndReturn(run func(context.Context, *model.RequestCreateTransaction) (*model.AccountTransaction, error)) *Usecase_CreateTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountLimits provides a mock function with given fields: ctx, accountID
func (_m *Usecase) GetAccountLimits(ctx context.Context, accountID int64) ([]*model.AccountLimits, error) {
	ret := _m.Called(ctx, accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountLimits")
	}

	var r0 []*model.AccountLimits
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*model.AccountLimits, error)); ok {
		return rf(ctx, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*model.AccountLimits); ok {
		r0 = rf(ctx, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AccountLimits)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_GetAccountLimits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountLimits'
type Usecase_GetAccountLimits_Call struct {
	*mock.Call
}

// GetAccountLimits is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID int64
func (_e *Usecase_Expecter) GetAccountLimits(ctx interface{}, accountID interface{}) *Usecase_GetAccountLimits_Call {
	return &Usecase_GetAccountLimits_Call{Call: _e.mock.On("GetAccountLimits", ctx, accountID)}
}

func (_c *Usecase_GetAccountLimits_Call) Run(run func(ctx context.Context, accountID int64)) *Usecase_GetAccountLimits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Usecase_GetAccountLimits_Call) Return(_a0 []*model.AccountLimits, _a1 error) *Usecase_GetAccountLimits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_GetAccountLimits_Call) RunAndReturn(run func(context.Context, int64) ([]*model.AccountLimits, error)) *Usecase_GetAccountLimits_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountProfile provides a mock function with given fields: ctx, accountID
func (_m *Usecase) GetAccountProfile(ctx context.Context, accountID int64) (*model.AccountProfile, error) {
	ret := _m.Called(ctx, accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountProfile")
	}

	var r0 *model.AccountProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*model.AccountProfile, error)); ok {
		return rf(ctx, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.AccountProfile); ok {
		r0 = rf(ctx, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccountProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_GetAccountProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountProfile'
type Usecase_GetAccountProfile_Call struct {
	*mock.Call
}

// GetAccountProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID int64
func (_e *Usecase_Expecter) GetAccountProfile(ctx interface{}, accountID interface{}) *Usecase_GetAccountProfile_Call {
	return &Usecase_GetAccountProfile_Call{Call: _e.mock.On("GetAccountProfile", ctx, accountID)}
}

func (_c *Usecase_GetAccountProfile_Call) Run(run func(ctx context.Context, accountID int64)) *Usecase_GetAccountProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Usecase_GetAccountProfile_Call) Return(_a0 *model.AccountProfile, _a1 error) *Usecase_GetAccountProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_GetAccountProfile_Call) RunAndReturn(run func(context.Context, int64) (*model.AccountProfile, error)) *Usecase_GetAccountProfile_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountTransactions provides a mock function with given fields: ctx, accountID
func (_m *Usecase) GetAccountTransactions(ctx context.Context, accountID int64) ([]*model.AccountTransaction, error) {
	ret := _m.Called(ctx, accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountTransactions")
	}

	var r0 []*model.AccountTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*model.AccountTransaction, error)); ok {
		return rf(ctx, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*model.AccountTransaction); ok {
		r0 = rf(ctx, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AccountTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_GetAccountTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountTransactions'
type Usecase_GetAccountTransactions_Call struct {
	*mock.Call
}

// GetAccountTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID int64
func (_e *Usecase_Expecter) GetAccountTransactions(ctx interface{}, accountID interface{}) *Usecase_GetAccountTransactions_Call {
	return &Usecase_GetAccountTransactions_Call{Call: _e.mock.On("GetAccountTransactions", ctx, accountID)}
}

func (_c *Usecase_GetAccountTransactions_Call) Run(run func(ctx context.Context, accountID int64)) *Usecase_GetAccountTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Usecase_GetAccountTransactions_Call) Return(_a0 []*model.AccountTransaction, _a1 error) *Usecase_GetAccountTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_GetAccountTransactions_Call) RunAndReturn(run func(context.Context, int64) ([]*model.AccountTransaction, error)) *Usecase_GetAccountTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAccountLimit provides a mock function with given fields: ctx, req
func (_m *Usecase) ValidateAccountLimit(ctx context.Context, req *model.RequestCreateTransaction) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAccountLimit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.RequestCreateTransaction) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Usecase_ValidateAccountLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAccountLimit'
type Usecase_ValidateAccountLimit_Call struct {
	*mock.Call
}

// ValidateAccountLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - req *model.RequestCreateTransaction
func (_e *Usecase_Expecter) ValidateAccountLimit(ctx interface{}, req interface{}) *Usecase_ValidateAccountLimit_Call {
	return &Usecase_ValidateAccountLimit_Call{Call: _e.mock.On("ValidateAccountLimit", ctx, req)}
}

func (_c *Usecase_ValidateAccountLimit_Call) Run(run func(ctx context.Context, req *model.RequestCreateTransaction)) *Usecase_ValidateAccountLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.RequestCreateTransaction))
	})
	return _c
}

func (_c *Usecase_ValidateAccountLimit_Call) Return(_a0 error) *Usecase_ValidateAccountLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Usecase_ValidateAccountLimit_Call) RunAndReturn(run func(context.Context, *model.RequestCreateTransaction) error) *Usecase_ValidateAccountLimit_Call {
	_c.Call.Return(run)
	return _c
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
