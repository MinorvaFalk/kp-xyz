// Code generated by mockery. DO NOT EDIT.

package api

import (
	context "context"
	api "kp/internal/api"

	entity "kp/internal/entity"

	mock "github.com/stretchr/testify/mock"

	model "kp/internal/model"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// CreateCustomer provides a mock function with given fields: ctx, data
func (_m *Repository) CreateCustomer(ctx context.Context, data *entity.Customers) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Customers) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_CreateCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomer'
type Repository_CreateCustomer_Call struct {
	*mock.Call
}

// CreateCustomer is a helper method to define mock.On call
//   - ctx context.Context
//   - data *entity.Customers
func (_e *Repository_Expecter) CreateCustomer(ctx interface{}, data interface{}) *Repository_CreateCustomer_Call {
	return &Repository_CreateCustomer_Call{Call: _e.mock.On("CreateCustomer", ctx, data)}
}

func (_c *Repository_CreateCustomer_Call) Run(run func(ctx context.Context, data *entity.Customers)) *Repository_CreateCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Customers))
	})
	return _c
}

func (_c *Repository_CreateCustomer_Call) Return(_a0 error) *Repository_CreateCustomer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_CreateCustomer_Call) RunAndReturn(run func(context.Context, *entity.Customers) error) *Repository_CreateCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTransactions provides a mock function with given fields: ctx, data
func (_m *Repository) CreateTransactions(ctx context.Context, data *entity.Transactions) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransactions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Transactions) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_CreateTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransactions'
type Repository_CreateTransactions_Call struct {
	*mock.Call
}

// CreateTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - data *entity.Transactions
func (_e *Repository_Expecter) CreateTransactions(ctx interface{}, data interface{}) *Repository_CreateTransactions_Call {
	return &Repository_CreateTransactions_Call{Call: _e.mock.On("CreateTransactions", ctx, data)}
}

func (_c *Repository_CreateTransactions_Call) Run(run func(ctx context.Context, data *entity.Transactions)) *Repository_CreateTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Transactions))
	})
	return _c
}

func (_c *Repository_CreateTransactions_Call) Return(_a0 error) *Repository_CreateTransactions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_CreateTransactions_Call) RunAndReturn(run func(context.Context, *entity.Transactions) error) *Repository_CreateTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function with given fields: ctx, id
func (_m *Repository) GetAccount(ctx context.Context, id int64) (*entity.Accounts, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *entity.Accounts
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entity.Accounts, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.Accounts); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Accounts)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type Repository_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Repository_Expecter) GetAccount(ctx interface{}, id interface{}) *Repository_GetAccount_Call {
	return &Repository_GetAccount_Call{Call: _e.mock.On("GetAccount", ctx, id)}
}

func (_c *Repository_GetAccount_Call) Run(run func(ctx context.Context, id int64)) *Repository_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Repository_GetAccount_Call) Return(_a0 *entity.Accounts, _a1 error) *Repository_GetAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetAccount_Call) RunAndReturn(run func(context.Context, int64) (*entity.Accounts, error)) *Repository_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountCustomer provides a mock function with given fields: ctx, accountID
func (_m *Repository) GetAccountCustomer(ctx context.Context, accountID int64) (*entity.Customers, error) {
	ret := _m.Called(ctx, accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountCustomer")
	}

	var r0 *entity.Customers
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entity.Customers, error)); ok {
		return rf(ctx, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.Customers); ok {
		r0 = rf(ctx, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Customers)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetAccountCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountCustomer'
type Repository_GetAccountCustomer_Call struct {
	*mock.Call
}

// GetAccountCustomer is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID int64
func (_e *Repository_Expecter) GetAccountCustomer(ctx interface{}, accountID interface{}) *Repository_GetAccountCustomer_Call {
	return &Repository_GetAccountCustomer_Call{Call: _e.mock.On("GetAccountCustomer", ctx, accountID)}
}

func (_c *Repository_GetAccountCustomer_Call) Run(run func(ctx context.Context, accountID int64)) *Repository_GetAccountCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Repository_GetAccountCustomer_Call) Return(_a0 *entity.Customers, _a1 error) *Repository_GetAccountCustomer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetAccountCustomer_Call) RunAndReturn(run func(context.Context, int64) (*entity.Customers, error)) *Repository_GetAccountCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountLimits provides a mock function with given fields: ctx, accountID
func (_m *Repository) GetAccountLimits(ctx context.Context, accountID int64) ([]*model.AccountLimits, error) {
	ret := _m.Called(ctx, accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountLimits")
	}

	var r0 []*model.AccountLimits
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*model.AccountLimits, error)); ok {
		return rf(ctx, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*model.AccountLimits); ok {
		r0 = rf(ctx, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AccountLimits)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetAccountLimits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountLimits'
type Repository_GetAccountLimits_Call struct {
	*mock.Call
}

// GetAccountLimits is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID int64
func (_e *Repository_Expecter) GetAccountLimits(ctx interface{}, accountID interface{}) *Repository_GetAccountLimits_Call {
	return &Repository_GetAccountLimits_Call{Call: _e.mock.On("GetAccountLimits", ctx, accountID)}
}

func (_c *Repository_GetAccountLimits_Call) Run(run func(ctx context.Context, accountID int64)) *Repository_GetAccountLimits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Repository_GetAccountLimits_Call) Return(_a0 []*model.AccountLimits, _a1 error) *Repository_GetAccountLimits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetAccountLimits_Call) RunAndReturn(run func(context.Context, int64) ([]*model.AccountLimits, error)) *Repository_GetAccountLimits_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountTransactions provides a mock function with given fields: ctx, accountID
func (_m *Repository) GetAccountTransactions(ctx context.Context, accountID int64) ([]*entity.Transactions, error) {
	ret := _m.Called(ctx, accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountTransactions")
	}

	var r0 []*entity.Transactions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*entity.Transactions, error)); ok {
		return rf(ctx, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*entity.Transactions); ok {
		r0 = rf(ctx, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Transactions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetAccountTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountTransactions'
type Repository_GetAccountTransactions_Call struct {
	*mock.Call
}

// GetAccountTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID int64
func (_e *Repository_Expecter) GetAccountTransactions(ctx interface{}, accountID interface{}) *Repository_GetAccountTransactions_Call {
	return &Repository_GetAccountTransactions_Call{Call: _e.mock.On("GetAccountTransactions", ctx, accountID)}
}

func (_c *Repository_GetAccountTransactions_Call) Run(run func(ctx context.Context, accountID int64)) *Repository_GetAccountTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Repository_GetAccountTransactions_Call) Return(_a0 []*entity.Transactions, _a1 error) *Repository_GetAccountTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetAccountTransactions_Call) RunAndReturn(run func(context.Context, int64) ([]*entity.Transactions, error)) *Repository_GetAccountTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// GetAdminFee provides a mock function with given fields: ctx
func (_m *Repository) GetAdminFee(ctx context.Context) (float64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAdminFee")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (float64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) float64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetAdminFee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAdminFee'
type Repository_GetAdminFee_Call struct {
	*mock.Call
}

// GetAdminFee is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) GetAdminFee(ctx interface{}) *Repository_GetAdminFee_Call {
	return &Repository_GetAdminFee_Call{Call: _e.mock.On("GetAdminFee", ctx)}
}

func (_c *Repository_GetAdminFee_Call) Run(run func(ctx context.Context)) *Repository_GetAdminFee_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_GetAdminFee_Call) Return(_a0 float64, _a1 error) *Repository_GetAdminFee_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetAdminFee_Call) RunAndReturn(run func(context.Context) (float64, error)) *Repository_GetAdminFee_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomer provides a mock function with given fields: ctx, id
func (_m *Repository) GetCustomer(ctx context.Context, id int64) (*entity.Customers, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomer")
	}

	var r0 *entity.Customers
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entity.Customers, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.Customers); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Customers)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomer'
type Repository_GetCustomer_Call struct {
	*mock.Call
}

// GetCustomer is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Repository_Expecter) GetCustomer(ctx interface{}, id interface{}) *Repository_GetCustomer_Call {
	return &Repository_GetCustomer_Call{Call: _e.mock.On("GetCustomer", ctx, id)}
}

func (_c *Repository_GetCustomer_Call) Run(run func(ctx context.Context, id int64)) *Repository_GetCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Repository_GetCustomer_Call) Return(_a0 *entity.Customers, _a1 error) *Repository_GetCustomer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetCustomer_Call) RunAndReturn(run func(context.Context, int64) (*entity.Customers, error)) *Repository_GetCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// GetLimit provides a mock function with given fields: ctx, id
func (_m *Repository) GetLimit(ctx context.Context, id int64) (*entity.Limits, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetLimit")
	}

	var r0 *entity.Limits
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entity.Limits, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.Limits); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Limits)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLimit'
type Repository_GetLimit_Call struct {
	*mock.Call
}

// GetLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Repository_Expecter) GetLimit(ctx interface{}, id interface{}) *Repository_GetLimit_Call {
	return &Repository_GetLimit_Call{Call: _e.mock.On("GetLimit", ctx, id)}
}

func (_c *Repository_GetLimit_Call) Run(run func(ctx context.Context, id int64)) *Repository_GetLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Repository_GetLimit_Call) Return(_a0 *entity.Limits, _a1 error) *Repository_GetLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetLimit_Call) RunAndReturn(run func(context.Context, int64) (*entity.Limits, error)) *Repository_GetLimit_Call {
	_c.Call.Return(run)
	return _c
}

// GetListAccounts provides a mock function with given fields: ctx
func (_m *Repository) GetListAccounts(ctx context.Context) ([]*entity.Accounts, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetListAccounts")
	}

	var r0 []*entity.Accounts
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entity.Accounts, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Accounts); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Accounts)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetListAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListAccounts'
type Repository_GetListAccounts_Call struct {
	*mock.Call
}

// GetListAccounts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) GetListAccounts(ctx interface{}) *Repository_GetListAccounts_Call {
	return &Repository_GetListAccounts_Call{Call: _e.mock.On("GetListAccounts", ctx)}
}

func (_c *Repository_GetListAccounts_Call) Run(run func(ctx context.Context)) *Repository_GetListAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_GetListAccounts_Call) Return(_a0 []*entity.Accounts, _a1 error) *Repository_GetListAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetListAccounts_Call) RunAndReturn(run func(context.Context) ([]*entity.Accounts, error)) *Repository_GetListAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// GetListCustomers provides a mock function with given fields: ctx
func (_m *Repository) GetListCustomers(ctx context.Context) ([]*entity.Customers, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetListCustomers")
	}

	var r0 []*entity.Customers
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entity.Customers, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Customers); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Customers)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetListCustomers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListCustomers'
type Repository_GetListCustomers_Call struct {
	*mock.Call
}

// GetListCustomers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) GetListCustomers(ctx interface{}) *Repository_GetListCustomers_Call {
	return &Repository_GetListCustomers_Call{Call: _e.mock.On("GetListCustomers", ctx)}
}

func (_c *Repository_GetListCustomers_Call) Run(run func(ctx context.Context)) *Repository_GetListCustomers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_GetListCustomers_Call) Return(_a0 []*entity.Customers, _a1 error) *Repository_GetListCustomers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetListCustomers_Call) RunAndReturn(run func(context.Context) ([]*entity.Customers, error)) *Repository_GetListCustomers_Call {
	_c.Call.Return(run)
	return _c
}

// GetListFees provides a mock function with given fields: ctx
func (_m *Repository) GetListFees(ctx context.Context) ([]*entity.Fees, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetListFees")
	}

	var r0 []*entity.Fees
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entity.Fees, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Fees); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Fees)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetListFees_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListFees'
type Repository_GetListFees_Call struct {
	*mock.Call
}

// GetListFees is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) GetListFees(ctx interface{}) *Repository_GetListFees_Call {
	return &Repository_GetListFees_Call{Call: _e.mock.On("GetListFees", ctx)}
}

func (_c *Repository_GetListFees_Call) Run(run func(ctx context.Context)) *Repository_GetListFees_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_GetListFees_Call) Return(_a0 []*entity.Fees, _a1 error) *Repository_GetListFees_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetListFees_Call) RunAndReturn(run func(context.Context) ([]*entity.Fees, error)) *Repository_GetListFees_Call {
	_c.Call.Return(run)
	return _c
}

// GetListLimits provides a mock function with given fields: ctx
func (_m *Repository) GetListLimits(ctx context.Context) ([]*entity.Limits, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetListLimits")
	}

	var r0 []*entity.Limits
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entity.Limits, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Limits); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Limits)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetListLimits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListLimits'
type Repository_GetListLimits_Call struct {
	*mock.Call
}

// GetListLimits is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) GetListLimits(ctx interface{}) *Repository_GetListLimits_Call {
	return &Repository_GetListLimits_Call{Call: _e.mock.On("GetListLimits", ctx)}
}

func (_c *Repository_GetListLimits_Call) Run(run func(ctx context.Context)) *Repository_GetListLimits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_GetListLimits_Call) Return(_a0 []*entity.Limits, _a1 error) *Repository_GetListLimits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetListLimits_Call) RunAndReturn(run func(context.Context) ([]*entity.Limits, error)) *Repository_GetListLimits_Call {
	_c.Call.Return(run)
	return _c
}

// GetListTransactions provides a mock function with given fields: ctx
func (_m *Repository) GetListTransactions(ctx context.Context) ([]*entity.Transactions, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetListTransactions")
	}

	var r0 []*entity.Transactions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entity.Transactions, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Transactions); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Transactions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetListTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListTransactions'
type Repository_GetListTransactions_Call struct {
	*mock.Call
}

// GetListTransactions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) GetListTransactions(ctx interface{}) *Repository_GetListTransactions_Call {
	return &Repository_GetListTransactions_Call{Call: _e.mock.On("GetListTransactions", ctx)}
}

func (_c *Repository_GetListTransactions_Call) Run(run func(ctx context.Context)) *Repository_GetListTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_GetListTransactions_Call) Return(_a0 []*entity.Transactions, _a1 error) *Repository_GetListTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetListTransactions_Call) RunAndReturn(run func(context.Context) ([]*entity.Transactions, error)) *Repository_GetListTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// Trx provides a mock function with given fields: ctx, fn
func (_m *Repository) Trx(ctx context.Context, fn func(api.Repository) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for Trx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(api.Repository) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Trx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Trx'
type Repository_Trx_Call struct {
	*mock.Call
}

// Trx is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(api.Repository) error
func (_e *Repository_Expecter) Trx(ctx interface{}, fn interface{}) *Repository_Trx_Call {
	return &Repository_Trx_Call{Call: _e.mock.On("Trx", ctx, fn)}
}

func (_c *Repository_Trx_Call) Run(run func(ctx context.Context, fn func(api.Repository) error)) *Repository_Trx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(api.Repository) error))
	})
	return _c
}

func (_c *Repository_Trx_Call) Return(_a0 error) *Repository_Trx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Trx_Call) RunAndReturn(run func(context.Context, func(api.Repository) error) error) *Repository_Trx_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLimit provides a mock function with given fields: ctx, limits
func (_m *Repository) UpdateLimit(ctx context.Context, limits *entity.Limits) error {
	ret := _m.Called(ctx, limits)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLimit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Limits) error); ok {
		r0 = rf(ctx, limits)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_UpdateLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLimit'
type Repository_UpdateLimit_Call struct {
	*mock.Call
}

// UpdateLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - limits *entity.Limits
func (_e *Repository_Expecter) UpdateLimit(ctx interface{}, limits interface{}) *Repository_UpdateLimit_Call {
	return &Repository_UpdateLimit_Call{Call: _e.mock.On("UpdateLimit", ctx, limits)}
}

func (_c *Repository_UpdateLimit_Call) Run(run func(ctx context.Context, limits *entity.Limits)) *Repository_UpdateLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Limits))
	})
	return _c
}

func (_c *Repository_UpdateLimit_Call) Return(_a0 error) *Repository_UpdateLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_UpdateLimit_Call) RunAndReturn(run func(context.Context, *entity.Limits) error) *Repository_UpdateLimit_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
